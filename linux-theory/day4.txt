uniq uniq.txt  // All repeated lines are removed.
uniq -c uniq.txt  //it tells the number of times a line was repeated.
uniq -d uniq.txt  // it only displayed one duplicate line per group.
uniq -D uniq.txt  // all the duplicate lines are displayed.
uniq -u uniq.txt // it prints only the unique lines.
cut -b 1,5,7 file1 // List without ranges.
cut -b 1-3,5-9 file1 // List with ranges.
cut -b 1- file1 // 1- indicate from 1st byte to end byte of a line.
cut -b -3 file1  // -3 indicate from 1st byte to 3rd byte of a line.
cut -d " " -f 1 file1 // Note: Space is not considered as delimiter in UNIX. If -d option is    used then it considered space as a field separator or delimiter.
cut --complement -d " " -f 1 file1  // it complement the output.
man paste
paste a b
paste -d \| a b
man sort
sort -r emp.txt // sort in reverse order
sort -u cars // sort and remove duplicates
sort -M months // sort by month
cat file3 // Display the content of file3.
man tr
cat file3 | tr “[a-z]” “[A-Z]” // To convert from lower case to upper case.
cat file3 | tr “[:lower:]” “[:upper:]”  // To convert from lower case to upper case.
echo "Welcome    To    ITW1" | tr -s [:space:] ' ' // squeeze repeat occurrences of characters specified in a set use the -s option.
echo "My ID is 007" | tr -d [:digit:]  // To remove all the digits from the string.
echo "My ID is 007" | tr -cd [:digit:] //Remove all characters except digits.
man nl
nl a \\ give number to the lines.
nl -i5 a \\ overwrite the default increment.
nl -s: a \\ -s Add any string.
nl -bpG a  \\ regular expression matches the lines beginning with ‘G’ and so nl command numbers only those lines.
who | tee user \\it does both the tasks simultaneously, copies the result into the specified files or variables and also display the result. 

##### head and tail command ######
head file1  // default 10 lines
head -n 3 file1 // mention the number of lines
head -q  file1 state // -q for multiple files
tail file1  // default 10 lines
tail -n 3 file1 // mention the number of lines
tail -3 file1
tail +7 filename // start printing from line number ‘n’ till the end of the file
tail -q  file1 state // -q for multiple files
head -n 6 file1 | tail -4
tail -n 4 file1 | sort -r 
cat filename | head -n 20 | tail -n 5  > list.txt
####################################################################
sed
####################################################################
cat sed.txt
sed 's/unix/linux/' sed.txt    // replace the text in a file, replaces the word "unix" with    "linux" in the file.
sed 's/unix/linux/2' sed.txt   // Replacing the nth occurrence of a pattern in a line. Use the /1, /2 etc flags to replace the first, second occurrence of a pattern in a line. The below command replaces the second occurrence of the word "unix" with "linux" in a line.
sed 's/unix/linux/g' sed.txt  // Replacing all the occurrence of the pattern in a line.
sed 's/unix/linux/3g' sed.txt  // Replacing from nth occurrence to all occurrences in a line.
sed 's/unix/{&}/' sed.txt     // Using "&" as the matched string or to search a pattern.
sed 's/unix/{&&}/' sed.txt    // replace that pattern by adding duplicate pattern to it.
sed 's/unix/linux/p' sed.txt  // The /p print flag prints the replaced line twice on the terminal. If a line does not have the search pattern and is not replaced, then the /p prints that line only once.
sed -n 's/unix/linux/p' sed.txt // Use the -n option along with the /p print flag to display only the replaced lines. Here the -n option suppresses the duplicate rows generated by the /p flag and prints the replaced lines only one time.
sed 's/unix/linux/' sed.txt| sed 's/os/system/'  // Run multiple sed commands by piping the output of one sed command as input to another sed command.
sed -e 's/unix/linux/' -e 's/os/system/' sed.txt // -e option to run multiple sed commands in a single sed command.
sed '3 s/unix/linux/' sed.txt    // Replacing string on a specific line number.
sed '1,3 s/unix/linux/' sed.txt  // Replacing string on a range of lines.
sed '2d' sed.txt // Deleting lines.
sed '/a.p./d' emp.txt > olist.txt  // delete line which have pattern "a.p."
sed 'p' sed.txt    // to print each line of a file two times.
sed '$d' sed.txt   // Deleting the last line
sed 'X,Yd' sed.txt // Delete a range of files. (X =1, Y =3 )
sed '/unix/ a "Add a new line : hello everyone"' sed.txt  // add a new line after a pattern match is found. The "a" command to sed tells it to add a new line after a match is found.
sed '/unix/ i "Add a new line: Hi..."' sed.txt  // add a new line before a pattern match is found. The "i" command to sed tells it to add a new line before a match is found.
sed '/unix/ c "Change line"' sed.txt  // to replace an entire line with a new line. The "c" command to sed tells it to change the line.
sed '3q' emp.txt  \\ work as "head -3 emp.txt"  \\ q stand for (Quit), ie. quit after 3rd line.
sed '1,5p' emp.txt \\ p stand for printing address lines twice.
sed -n '1,3p' emp.txt  \\ '-n'used to overcome from the problem of duplicate lines.
sed -n '$p' emp.txt  \\ '$' used to select last line of the file.
sed -n '5,$!p' emp.txt  \\ Don't print the lines from 5 to the end.
sed -n -e '1,2p' -e '4,5p' -e '$p' emp.txt  \\ '-e' allow to enter many instruction as you wish.
sed '$a\1234|B.tech 1st year|student |IIT(BHU)   |22/02/56|6000' emp.txt  \\  'a' stand for appending the new text in existing text file and '$' used to append at end of the file.
sed '$a\1234|B.tech 1st year|student |IIT(BHU)   |22/02/56|6000\n5678| IIT BHU       |Director|Academic   |22/03/85|10000' emp.txt    \\ '\n' used for next line.
sed -n '/a.p./p' emp.txt   \\ work as "grep a.p. emp.txt" \\ selecting the pattern in all lines.
sed -n '/shukla/,/saksena/p' emp.txt \\ select from pattern 'shukla' to 'saksena' 
sed -n '7,/dutta/p' emp.txt  \\ select from line number 7 to pattern 'dutta'
sed -n '/[sS]a[kx]s*ena/p' emp.txt  \\ All the saksena to be selected.
sed -n -e '/[aA]g[ar,ra]*wal/p' -e '/[gG]up*ta/p' emp.txt \\ select either agarwal or gupta
sed -n '/a.p./w ap.txt' emp.txt    \\ 'w' command used for write the selected lines in a separate file.
sed G emp.txt  \\ inserting space
sed -n -e '/a.p./p' -e 's/a.p./g.m./p' emp.txt  \\ substitution by remembered pattern

#####################################################################################
AWK
#####################################################################################
SYNTEX:

awk options 'selection _criteria {action }' input-file > output-file

awk '{print}' emp.txt  \\ Display the emp.txt
awk uses the special parameter $0 to indicate entire line.
awk '{print NR,$0}' emp.txt 
awk '{print $1,$NF}' emp.txt \\ 
awk 'END { print NR }' emp.txt \\ To count the lines in a file
awk '{ if (length($0) > max) max = length($0) } END { print max }' awkeg.txt  \\ Find the length of the longest line present in a file.
awk 'length($0) > 18' awkeg.txt  \\Printing lines with more than 18 characters
single quoting an awk program protect them from interpretation by the shell.
awk -F "|" '/sales/ {print $2 $3 $4 $6}' emp.txt 
	#-F for specifying delimeter, 
With emp file as input awk use a line address to select lines. If you want to select lines 3 to 6 all you have to do is use the built-in variable NR to specify the line numbers.

awk -F "|" 'NR==3, NR==6 {print NR, $2, $3, $6}' emp.txt

awk -F "|" '/marketing/ {print $2 $3 $4 $6}' emp.txt|"sort" 

awk -F "|" '/marketing/ {print $2 $3 $4 $6}' emp.txt > "mylist"

awk 'BEGIN { for(i=1;i<=5;i++) print "square of", i, "is",i*i; }' \\ To print the squares of first numbers from 1 to n say 5.
########################################################################################
Built-in Functions in AWK

    Built-in functions for numeric operations.
    Built-in functions for string operations.

#########################################################################################

awk 'BEGIN{print int(3.534);print int(4);print int(-5.223);print int(-5);}' \\ int() function gives us the integer part of the given argument

awk 'BEGIN{print log(3.534);print log(4);print log(0);print log(-5);print log(-1);}'  \\ log() function provides natural logarithmic(with base e) of given amount n.

awk 'BEGIN{print sqrt(16);print sqrt(-12);}'\\sqrt() function gives the positive root for the given integer n.

awk 'BEGIN{print index("IIT(BHU)", "BH"); print index("VARANASI", "abc")}' \\ awk index(str1, str2) Function: This searches the string str1 for the first occurrences of the string str2, and returns the position in characters where that occurrence begins in the string str1. String indices in awk starts from 1.

awk 'BEGIN{print substr("Indian Institute of Technology", 18)}' \\ awk substr(s, p, n) 

awk 'BEGIN{print substr("Indian Institute of Technology", 18, 7)}'

awk 'BEGIN{print tolower("IIT(BHU), VARANASI")}' \\ Convert to lower case.
awk 'BEGIN{print toupper("iit(bhu), varanasi")}' \\ Convert to upper case.

awk 'BEGIN{string="We are good students"; fieldsep=" "; n=split(string, array, fieldsep); for(i=1; i<=n; i++){printf("%s\n", array[i]);}}' \\ awk split(string, array, fieldsep)












